---
- name: "Preflight - Fail if target host is not stable for this Role."
  fail:
    msg: "This role is not stable for the target operating system, {{ ansible_distribution }} {{ ansible_distribution_major_version }}."
  when: (ansible_distribution is not defined) or
        (ansible_distribution_version is not defined) or
        (ansible_distribution+" "+ansible_distribution_major_version not in certbot_stable_os)

- name: "Include Derivate specific Variables."
  include_vars: "{{ ansible_os_family }}.yml"
  changed_when: 'false'
  failed_when: 'false'

- name: "Include Distribution specific Variables."
  include_vars: "{{ ansible_distribution }}.yml"
  changed_when: 'false'
  failed_when: 'false'

- name: "Include Distribution Version specific Variables."
  include_vars: "{{ ansible_distribution }}{{ ansible_distribution_major_version }}.yml"
  changed_when: 'false'
  failed_when: 'false'

- name: "Install Certbot Packages."
  package:
    name: "{{ certbot_packages }}"
    state: present

- name: "Configure Renewal Cronjob for Apache2."
  cron:
    name: "Automatically renew all certificates issued via certbot with Apache2."
    job: '"$(command -v certbot)" renew --post-hook "systemctl reload {{ webserver_apache_name }}" -n --user-agent "" --agree-tos --expand'
    state: present
    disabled: 'no'
    minute: '13'
    hour: '15'
    day: '*/3'
    weekday: '*'
    month: '*'
  when: webserver_name == "apache"

- name: "Configure Renewal Cronjob for NGINX."
  cron:
    name: "Automatically renew all certificates issued via certbot with NGINX."
    job: '"$(command -v certbot)" renew --post-hook "systemctl reload {{ webserver_nginx_name }}" -n --user-agent "" --agree-tos --expand'
    state: present
    disabled: 'no'
    minute: '15'
    hour: '13'
    day: '*/3'
    weekday: '*'
    month: '*'
  when: webserver_name == "nginx"

- name: "Get certificates using apache module against the staging server."
  command: certbot "{{ certbot_mode }}" -n --"{{ certbot_module }}" -d "{{ certbot_domains }}" -m "{{ certbot_email }}" --user-agent "" --agree-tos --expand --staging
  when: certbot_staging | bool
  register: certbot_validation
  notify: "restart webserver {{ certbot_module }}"

- name: "Certbot output for staging."
  debug: msg="{{ certbot_validation.stdout_lines }}"
  when: certbot_validation.stdout_lines is defined

- name: "Get certificates using apache module against the productive server."
  command: certbot "{{ certbot_mode }}" -n --"{{ certbot_module }}" -d "{{ certbot_domains }}" -m "{{ certbot_email }}" --user-agent "" --agree-tos --expand
  when: not certbot_staging | bool
  register: certbot_validation
  notify: "restart webserver {{ certbot_module }}"
  ignore_errors: 'yes'

- name: "Certbot output for production."
  debug: msg="{{ certbot_validation.stdout_lines }}"
  when: certbot_validation.stdout_lines is defined

- name: "Get certificates using apache module against the productive server enforcing a renewal."
  command: certbot "{{ certbot_mode }}" -n --"{{ certbot_module }}" -d "{{ certbot_domains }}" -m "{{ certbot_email }}" --user-agent "" --agree-tos --expand --force-renew
  when: not certbot_staging | bool and certbot_force_renewal | bool
  register: certbot_validation
  notify: "restart webserver {{ certbot_module }}"

- name: "Certbot output for production enforcing a renewal."
  debug: msg="{{ certbot_validation.stdout_lines }}"
  when: certbot_validation.stdout_lines is defined
